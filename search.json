[{"title":"自然语言处理一","url":"/2019/09/07/自然语言处理一/","content":"\n### 什么是时间复杂度？\n\t用来度量算法的运行时间，记作T(n) = O(f(n))，表示随着输入大小ｎ的增大，\n\t算法执行需要的时间增长可以用f(n)来描述\n### 时间复杂度的计算方法？\n\t计算执行的次数？\n\t\t①遇到并列的相加即可\n\t\t②遇到if分支，哪个分支高执行哪个\n\t\t③循环条件，看执行变量是否有变化\n\t\t\n### [时间复杂度参考blog](https://www.jianshu.com/p/f4cca5ce055a \"参照页面\")\n\n\n## 常用计算复杂度的两种方法\n### 主定理公式\n#### 1.主定理的使用范围\n\t对于规模为n的分治问题(递归)即时间可以表示为T(n)=aT(n/b)+f(n)的形式\n#### 2.判定方法\n\t1.O(nlog_b_a) > O(f(n))===============>T(n)=O(nlog_b_a)\n\t2.O(nlog_b_a) < O(f(n))===============>T(n)=O(f(n))\n\t3.O(nlog_b_a*（log_n)^k)=O(f(n))======>T(n)=O(nlog_b_a*(logn)^(k+1))\n#### 3.案例分析\n\t例如对于A=[3,4,1,6,7,2,5,9]采用归并排序,假设时间T(n)\n\t1.[3,4,1,6],[7,2,5,9]  算法所用的时间为T(n)=2T(n/2)+n\n\t\t其中n:表示对于两个数组，一共要比较n次才能够获得排序后的队列\n\t计算过程\n\t\tb=2,a=2,f(n)=n\t\n\t\tn^log_b_a=n=f(n)\n\t\t所以T(n)=O(nlogn)\n\n### 递归数的方式\n#### 1.适用范围:\n\t对于递归嵌套调用，都可以画出递归树结构，然后计算复杂度\n#### 2.案例分析\n\t计算斐波那契数列的时间复杂度\n\tf(n)=f(n-1) + f(n-2)\n\tf(n-1)=f(n-2) + f(n-3)....\n\t画出递归数，我们可以看到\n\t第0层\t2^0\n\t第一层\t2^1\n\t第二层\t2^2\n\t...\n\t第n-2层\t2^(n-2)\n\t总时间复杂度2^0+2^1+2^2+....+2^(n-2)，近似为O(2^n)\n\t\n\t斐波那契数列的改进方案：\n\t\t对于上面的计算，有很多部分重复，我们可以采用DP方法O(n)\n\t     ' if(n == 0)\n\t 8         return 0;\n\t 9     if(n == 1)\n\t10         return 1;\n\t11     long firstItem = 0;\n\t12     long secondItem = 1;\n\t13     long fib = 0;\n\t14     unsigned int cnt = 1;\n\t15     while(cnt < n)\n\t16     {\n\t17         fib = firstItem + secondItem;\n\t18         firstItem = secondItem;\n\t19         secondItem = fib;\n\t20         ++cnt;\n\t21     }\n\t22     return fib;'\n\t\n\t\n\t改进方法2O(logn)\n\t采用矩阵的方法，(归纳法证明)\n\n\t\n\t改进方法三:公式法O(1)\n\n[参考博客](https://blog.csdn.net/u011068702/article/details/78948145 \"参考博客\")\n\n\n### 对于问题的划分\n\tP(可以解决的问题时间复杂度O(n^p))\n\tNP(可以解决的问题，但是用于判断这个解是不是想要的这类问题)\n\tNPHard(不可解决的问题O(p^n))\n\t\t1.对于较小型的问题仍可适用\n\t\t2.近似算法\n\t\t\t1.提出近似算法\n\t\t\t2.指出时间复杂度\n\t\t\t3.给出近似算法最后的解离我们想要的最优解有多远\n\t\t3.量子计算机\n\tNPComplete\n\n### 对于搜索问答系统的搭建步骤\n\t1.分词\n\t2.预处理\n\t\t1.拼写纠错\n\t\t2.五用词过滤\n\t\t3.同义词...\n\t3.文本表示\n\t4.计算相似度\n\t5.排序\n\t6.返回结果"},{"title":"Hello World","url":"/2019/09/06/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n## Hello Hexo\n\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]